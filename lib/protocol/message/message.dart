part of '../protocol.dart';

///Class to streamline all information between a device connection
///
///Shall be the only class which is exchanged via the NCA

class Message {
  Message({
    required this.id,
    required this.senderId,
    required this.receiverId,
    required this.route,
    required this.payload,
    required this.messageType,
  });

  ///Unique id to identify a message
  ///
  ///Should be generated by sender
  ///Because uniqueness is not always guaranteed, a time-based method is recommended
  ///Example:
  ///```dart
  ///Uuid().v4()
  ///```
  String id;

  ///Unique id to identify the sender
  String senderId;

  ///Unique id to identify the receiver
  String receiverId;

  ///List of [RouteNode] representing the rout chosen by the sender
  MessageRoute route;

  ///payload of the message needs to be convertible to a json like object
  ///
  ///should be corresponding with the [messageType]
  dynamic payload;

  ///representing the type of the message
  ///
  ///should be corresponding with the [payload]
  MessageType messageType;

  ///Convert [Message] to [Map]
  Map<String, dynamic> toMap() {
    return {
      'id': id,
      'senderId': senderId,
      'receiverId': receiverId,
      'route': route.map((node) => node.toMap()).toList(),
      'payload': payload,
      'messageType': messageType.name,
    };
  }

  ///Convert [Map] to [Message]
  factory Message.fromMap(Map<String, dynamic> map) {
    return Message(
      id: map['id'] as String,
      senderId: map['senderId'] as String,
      receiverId: map['receiverId'] as String,
      route: (map['route'] as List)
          .map((node) => RouteNode.fromMap(node as Map<String, dynamic>))
          .toList()
          .cast<RouteNode>(),
      payload: map['payload'],
      messageType: MessageType.values.byName(map['messageType'] as String),
    );
  }

  ///Convert [Message] to Json
  String toJson() {
    return json.encode(toMap());
  }

  ///Convert Json to [Message]
  factory Message.fromJson(String jsonString) {
    return Message.fromMap(json.decode(jsonString) as Map<String, dynamic>);
  }

  /// Override toString
  ///
  /// Returns a string representation of the message
  @override
  String toString() {
    return 'Message{id: $id, senderId: $senderId, receiverId: $receiverId, route: $route, payload: $payload, messageType: $messageType}';
  }

  /// Override ==
  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      other is Message &&
          runtimeType == other.runtimeType &&
          id == other.id &&
          senderId == other.senderId &&
          receiverId == other.receiverId &&
          const ListEquality().equals(route, other.route) &&
          payload == other.payload &&
          messageType == other.messageType;

  /// Override hashCode
  @override
  int get hashCode {
    int routeHashCode = 0;
    for (final node in route) {
      routeHashCode += node.hashCode;
    }
    return id.hashCode ^
        senderId.hashCode ^
        receiverId.hashCode ^
        routeHashCode ^
        payload.hashCode ^
        messageType.hashCode;
  }
}
